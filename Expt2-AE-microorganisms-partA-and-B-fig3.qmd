---
title: "2A & B: Pond Water Microbes"
author: "Caitlin Nordheim-Maestas"
format: docx
# format:
#   html:
#     embed-resources: true
#     toc: true
#     code-fold: true
#     toc-location: left
---

Data wrangling and analysis the AE microrganisms in pond water experiment using the SFEB (San Francisco East Bay) water samples for part A (nicknamed "fifteen sites" in our lab) and the follow up experiment part B with SBNCOS (Santa Barbara North Campus Open Space) pond water samples. These are the data presented in Figure 3A and 3B in the manuscript, and information is under the section "Experiment 2: Assessment of AE microorganisms’ inhibitory effects on Bd growth". 

# Load in data and libraries

```{r}
#| warning: false

## read in and clean data
library(tidyverse) # for cleaning and viewing data
library(gt) # pretty stats tables
library(broom) # cleaning for gt
library(here) # for importing data
library(car) # stats tests
library(Hmisc) # autocalculate stat summaries in ggplot
library(multcomp) # stats
library(nlme) # mixed effects models
library(emmeans) # for pairwise comparisons, especially on mixed effects models and glms
library(ggpubr) # for making ggqq plot
library(patchwork) # for combining figures
library(multcompView) # for posthoc visualization

# load "East Bay" experiment data
fs_pw_bd <- read.csv(here("data", "fifteen-sites-PW-on-Bd - Sheet1.csv"))

# load "SBNCOS" experiment data
## note the data file is called 2b because it was initially the second figure but we added in a methods figure so this will be 3b
sbncos_raw <- read.csv(here("data", "final_NCOS_2024_reformatted_for_R.xlsx - Fig2B.csv"))

# Colors: these are from Paul Tol's colorblind friendly palette
with_microbes_40_color <- "#999933"
no_microbes_.22_color <- "#88ccee"

# custom theme for EDA
myCustomTheme <- function() {
  theme_light() +
    theme(axis.text = element_text(size = 12, family = "Times", color = "black"),
          axis.title.x = element_text(margin = margin(t = 10), size = 14, face = "bold", family = "Times", color = "black"), # Add space between x-axis label and axis
          axis.title.y = element_text(margin = margin(r = 10), size = 14, face = "bold", family = "Times", color = "black"), # Add space between y-axis label and axis
          title = element_text(size = 12, face = "bold", family = "Times"),
          plot.caption = element_text(size = 10, face = "italic", family = "Times"),
          legend.text = element_text(size = 10, family = "Times"), # Increase legend text size
          panel.grid.major.x = element_blank(), # Remove major vertical grid lines
          panel.grid.minor.x = element_blank(), # Remove minor vertical grid lines
          panel.grid.major.y = element_blank(), # Remove major horizontal grid lines
          panel.grid.minor.y = element_blank(), # Remove minor horizontal grid lines
          strip.text = element_text(size = 12, face = "bold", family = "Times", color = "black"), # Set strip text style
          strip.background = element_rect(fill = "white", color = "grey"), # Set strip background to white, # color = "black"
          axis.ticks = element_blank() # Remove x and y axis ticks
    )}
```

# Part A: SFEB Microorganisms

## Data Wrangling

```{r}
# make dataframe with only field data (milliq controls added into visualization later)
eb_pw <- fs_pw_bd %>% 
  filter(site != "sterile MQ") # keep all sites except this control

# dataframe of controls for labeling plot later
eb_pw_controls <- fs_pw_bd %>% 
  filter(site =="sterile MQ") %>% # keep all sites except this control
  pivot_wider(names_from = bd_location, values_from = bd_qty) %>% # make "wide" format to allow for combining the Bd from different locations in the wells
  mutate(combined_bd = adherent + floating) %>% # add Bd quantity from the adherent fraction (DNA adhered to bottom and sides of well) and the floating fraction (not adhered to well)
   mutate(
     day = case_when( # change the format of day from a number to ensure it will be a factor in analysis
      day == 1 ~ "Day_1",
     day == 7 ~ "Day_7"))

# data type cleaning
eb_pw$bd_location <- factor(eb_pw$bd_location, levels = c("floating", "adherent")) # bd location (aka location of DNA in the well) is a factor, set levels for barchart figure in SI
eb_pw$filter <- factor(eb_pw$filter,
                          levels = c("40um_filter", "0.22um_filter")) # filter type levels for correct order in visualization
eb_pw$day <- factor(eb_pw$day, levels = c("1", "7"),
                            labels = c("Day_1", "Day_7")) # set levels for visualization, set labels for visualization too
eb_pw$site <- factor(eb_pw$site,
                          levels = c("BARN", "CABIN", "NORTH", "GRAMPS", "WEST", "GDPND004", "GDPND005", "GDPND006", "GDPND008", "GDPND009", "PRPND002", "PRPND003", "PRPND004", "PRPND009", "PRPND010", "sterile MQ")) # set site name as a factor and gave levels to ensure correct order when plotting

# new dataframe to allow for the calculation of the rate loss of Bd from the total sample days by combining both "locations" (adherent and supernatant) of Bd 
eb_pw_total_diff <- eb_pw %>%
  # combine floating and adherent for total_Bd
  pivot_wider(names_from = bd_location, values_from = bd_qty) %>%
  mutate(combined_bd = adherent + floating) %>% # for exploration purposes only, the rate loss is used for analyses
  # remove uneeded columns
  subset(select = -c(adherent,floating)) %>% 

# pivot wider to calculate the rate loss
  pivot_wider(names_from = day, values_from = combined_bd) %>%
  # calculate the rate loss by taking the log of each before subtracting
  mutate(rate_loss = log(Day_1) - log(Day_7))

# Split into 2 data frames one for 40 um filter and one for .22 um filter for later stats assumption checks
eb_pw_total_diff_40um <- eb_pw_total_diff %>% 
  filter(filter =="40um_filter") # for AE microorganisms +
eb_pw_total_diff.22um <- eb_pw_total_diff%>% 
  filter(filter =="0.22um_filter") # for AE microorganisms -

# save clean data as a csv
write.csv(eb_pw_total_diff, "data/eb_pw_total_diff.csv", row.names = FALSE)
```

# SFEB EDA

Exploratory data analysis

## Assumption testing for stats

Question: Does the rate loss in Bd from day 1 to day 7 (aka Bd-inhibitory potency) differ between the two filter types (40 and 0.22 um; aka AE microorganisms + and  AE microorganisms -)?

The samples are paired by site, so a paired t-test is most appropriate. The null hypothesis of our paired t-test is:

$H0:μ_{rate loss of Bd}=0$

**Statistical question**: Is there a difference in the **rate of gain or loss of Bd over 6 days** (aka Bd-inhibitory potency) between the **filter sizes** (looking at the TOTAL BD from each well)

Assumption testing:

```{r}
# check normality of the differences across groups

# numeric check using shapiro wilks test, a p > 0.05 says the data is indeed normal
eb_pw_40um_shapiro.test <- shapiro.test(eb_pw_total_diff_40um$rate_loss) # normal, yay!
eb_pw_0.22um_shapiro.test <- shapiro.test(eb_pw_total_diff.22um$rate_loss) # normal, yay!

#...............With microorganisms (40 um filter)...............

# visual check using qq plot to see normality of the rate loss
eb_pw_40um_qq <- eb_pw_total_diff_40um %>% 
  ggqqplot("rate_loss", title = "40 um") # normal, yay!

# visual check using histogram of the rate loss to see normality
eb_pw_40um_hist <- eb_pw_total_diff_40um %>% 
  ggplot(aes(x = rate_loss)) +
  geom_histogram(binwidth = 0.2) +
  labs(title = "40 um") # good enough, especially with confirmed shapiro and qq

#............Without microorganisms (0.22 um filter).............
# visual check using qq plot to see normality of the rate loss
eb_pw_0.22um_qq <- eb_pw_total_diff.22um %>% 
  ggqqplot("rate_loss", title = "0.22 um") # normal, yay!

# visual check using histogram of the rate loss to see normality
eb_pw_0.22um_hist <- eb_pw_total_diff.22um %>% 
  ggplot(aes(x = rate_loss)) +
  geom_histogram(binwidth = 0.2) +
  labs(title = "0.22 um") # good enough, especially with confirmed shapiro and qq

# show all assumption testing visualizations together
eb_pw_40um_qq + eb_pw_40um_hist + eb_pw_0.22um_qq + eb_pw_0.22um_hist

# print shapiro test results
eb_pw_40um_shapiro.test
eb_pw_0.22um_shapiro.test
```

Assumptions test statement:

The data for the 40um filter is normally distributed (Shapiro-Wilk test, W = `r round(eb_pw_40um_shapiro.test$statistic, 5)`, p = `r round(eb_pw_40um_shapiro.test$p.value, 4)`), and so is the data for the 0.22 filter (Shapiro-Wilk test, W = `r round(eb_pw_0.22um_shapiro.test$statistic, 5)`, p = `r round(eb_pw_0.22um_shapiro.test$p.value, 4)`).

## SFEB Analysis

```{r}
# Run the paired t-test on the rate loss across the 6 days
eb_pw_paired_ttest_result <- t.test(eb_pw_total_diff_40um$rate_loss, eb_pw_total_diff.22um$rate_loss, paired = TRUE)

# print the result
eb_pw_paired_ttest_result
```

Results statement: 

**There is a significant difference in the rate loss or gain in the total quantity of Bd from Day 1 to Day 7 across the filter types (t = `r eb_pw_paired_ttest_result$statistic`, df = `r eb_pw_paired_ttest_result$parameter`, p-value = `r eb_pw_paired_ttest_result$p.value`)**

The t-value is positive, which shows that the first item entered (40 um filter aka with microbes) has a larger loss of Bd than the second item entered (no microbes.) Df of 14 is expected, because it's 15 sites.

# Part B: SBNCOS AE microorganisms

## Data wrangling

```{r}
pw <- sbncos_raw %>% 
# add column for microbes presence yes or no this will be used in visualization, but not the stats
  mutate(microbes = case_when( 
    str_detect(sample_ID, "\\+microorganism") ~ "y", # if the raw data has microorganism in the sample id then it has microorganisms
    TRUE ~ "n" # otherwise, it does not
  )) %>% 
# add column for water_treatment (this WILL be in the stats)
  mutate(water_treatment = case_when(
    sample_ID %in% c("1%TB", "MQ", "Added Bd") ~ "sterile-water", # these treatments had a base of sterile water (aka MQ). if the sample id contains one of these treatments in the id, then we know the water treatment
    sample_ID %in% c("1%TB+PW+microorganism", "PW+microorganism") ~ "PW+MO", # same as above, except these sample id's had pond water with microorganisms still present, so pond water + microorganism (PW+MO)
    sample_ID %in% c("1%TB+PW-microorganism", "PW-microorganism") ~ "PW-MO" # same as above, except these sample id's had filtered pond water aka pond water without microorganisms(PW-MO)
  )) %>% 
# add column for TB (tryptone broth) or no (this WILL be in the stats)
  mutate(TB = case_when(
    str_detect(sample_ID, "TB") ~ "y", # if the raw data has TB in the sample id then it has TB
    TRUE ~ "n" # otherwise, it does not
  )) %>% 
  # update day column to have the word Day in it (this WILL be in the stats)
    mutate(day = case_when(
    day == 1 ~ "Day_1",
    day == 3 ~ "Day_3",
    day == 5 ~ "Day_5",
    day == 7 ~ "Day_7",
    day == 0 ~ "Day_0"
  )) %>% 
  # also create a column with day as just a number
  mutate(day_numeric = as.numeric(gsub("Day_", "", as.character(day))))

## make a summary dataframe for ggplot creation
pw_summary <- pw %>% 
  group_by(day, sample_ID) %>% # this groups all the replicates of the same day and treatmenttogether
  # note: adh_plus_sup means: total bd in the well (adherent plus supernatant material)
  reframe(mean = mean(adh_plus_sup), # calculate the mean 
            n = length(adh_plus_sup), # count the number of observations within the day and sample id
            df = n - 1, # calculate the degrees of freedom
            sd = sd(adh_plus_sup), # calculate the standard deviation
            se = sd/sqrt(n)) %>%  # calculate the standard error
          
  ## Now that it is in a new summarized format, recreate the columns made above
  mutate(microbes = case_when( # make column for microbes y or n
    str_detect(sample_ID, "\\+microorganism") ~ "y",TRUE ~ "n")) %>% # if the sample id contains \+microorganism then it has the microorganism, otherwise it doesnt. \\ is needed because it begins with symbol "+"
  # add column for TB (tryptone broth) or no
  mutate(TB = case_when(
    str_detect(sample_ID, "TB") ~ "y", TRUE ~ "n")) %>% 
  # add column for water treatment
   mutate(water_treatment = case_when(
    sample_ID %in% c("1%TB", "MQ", "Added Bd") ~ "sterile-water",
    sample_ID %in% c("1%TB+PW+microorganism", "PW+microorganism") ~ "PW+MO",
    sample_ID %in% c("1%TB+PW-microorganism", "PW-microorganism") ~ "PW-MO"
  )) %>% 
  mutate(day_numeric = as.numeric(gsub("Day_", "", as.character(day))))

# dataframe of only controls, controls will be plotted separately on the plot
pw_control_data <- pw %>%
  filter(day == "Day_0") %>% # day 0 are the "controls" here, the day Bd was added, only include these
  mutate(day_numeric = as.numeric(gsub("Day_", "", as.character(day)))) %>% # make column for day
  dplyr::select(day, adh_plus_sup, day_numeric) # select only relevant columns

# dataframe without controls, controls will be plotted separately on the plot
pw_noday0 <- pw %>%
  filter(day != "Day_0") %>% # day 0 are the "controls" here, we dont want these
  # log transform
   # note: no zeroes so no +1 to the log needed. log function is the natural log. 
  mutate(log_adh_plus_sup = log(adh_plus_sup)) %>% 
  mutate(day = factor(day, 
          levels = c("Day_1", "Day_3", "Day_5", "Day_7"))) # set day as a factor, set levels for plotting

# set MQ (sterile water MilliQ) as reference for sample ID
pw_noday0$sample_ID <- factor(pw_noday0$sample_ID) # set as factor
pw_noday0$sample_ID <- relevel(pw_noday0$sample_ID, ref = "MQ") # set as reference

# set sterile water as reference water treatment
pw_noday0$water_treatment <- factor(pw_noday0$water_treatment) # set as factor
pw_noday0$water_treatment <- relevel(pw_noday0$water_treatment, ref = "sterile-water") # set as reference

# set no TB as reference
pw_noday0$TB <- factor(pw_noday0$TB) # set as factor
pw_noday0$TB <- relevel(pw_noday0$TB, ref = "n") # set as reference

# set no microbes as reference
pw_noday0$microbes <- factor(pw_noday0$microbes) # set as factor
pw_noday0$microbes <- relevel(pw_noday0$microbes, ref = "n") # set as reference

# export clean data 
write.csv(pw_noday0, "data/pw_noday0.csv", row.names = FALSE)
```

## SBNCOS EDA

General visualization

```{r}
#| message: false
#| warning: false
#| output: false

pw_summary %>% 
 # reorder sample_ID factor levels to match Renwei's plot
  mutate(sample_ID = factor(sample_ID, 
                            levels = c("1%TB", "MQ", "1%TB+PW+microorganism", "PW+microorganism", "1%TB+PW-microorganism", "PW-microorganism", "Added Bd"))) %>% 

# plot it!
  ggplot(aes(x = day_numeric, # x = numeric day
           y = mean, # y = mean Bd quantity per treatment per day
           color = sample_ID)) +  # color points and lines by treatment
  geom_point(size = 2) +  # plot points for means
  geom_errorbar(aes(ymin = mean - se, # plot the standard error
                    ymax = mean + se),
                width = 0.1) +
   # log scale for y-axis
  scale_y_log10(limits = c(1e3, 1e8), # set y-axis range
                breaks = c(1e3, 1e4, 1e5, 1e6, 1e7, 1e8)) +  # breaks for y-axis ticks
  # labels
  labs(x = "Day",
       y = "Bd Quantity per sample (ZE/well)",
       color = "Medium", # color legend title
       linetype = "Microbes Present" ) + # linetype legend title
  scale_color_manual(values = c("1%TB" = "#CCBB44", 
                                "MQ" = "#228833", 
                                "1%TB+PW+microorganism" = "#4477AA", 
                                "PW+microorganism" = "#EE6677", 
                                "1%TB+PW-microorganism" = "#66CCEE",
                                "PW-microorganism" = "#AA3377"), 
                    # Custom labels for the color legend
                     labels = c("1%TB" = "TB",
                                "MQ" = "MQ",
                                "1%TB+PW+microorganism" = "TB + PW + MO",
                                "PW+microorganism" = "PW + MO",
                                "1%TB+PW-microorganism" = "TB + PW - MO",
                                "PW-microorganism" = "PW - MO",
                                "Added Bd" = "Initial Bd")) + 
  # add lines to connect points across days
    geom_line(aes(linetype = microbes)) + 
  # manually assign line types based on presence/absence of microbes
  scale_linetype_manual(values = c("n" = "dashed", 
                                   "y" = "solid"),
                        labels = c("n" = "N", "y" = "Y")) +  # Change labels to uppercase N and Y
  # custom x-axis breaks and labels, replace 0 with "Initial Bd"
  scale_x_continuous(breaks = c(0, 1, 3, 5, 7),
                   labels = c("Initial\nBd", "1", "3", "5", "7")) +
  theme(legend.position = "right")
```

visualize y variable: bd load

log transformed will get me closer to normal, so we will use that in the models! Note we only need to worry about the normality of *MODEL RESIDUALS* though which will be analyzed later on, so commented out the transformation and exploration of the data for space, feel free to uncomment and explore on your own though!

```{r}
# # untransformed
# ggqqplot(pw_noday0, "adh_plus_sup", title = "untransformed")
# shapiro.test(pw_noday0$adh_plus_sup) # nope
# hist(pw_noday0$adh_plus_sup) # note
# 
# # sqrt
# hist(sqrt(pw_noday0$adh_plus_sup)) # nope
# 
# # log 10
# hist(log10(pw_noday0$adh_plus_sup)) # much better...?
# shapiro.test(log10(pw_noday0$adh_plus_sup)) # closer
# 
# # log transformed
# ggqqplot(pw_noday0, "log_adh_plus_sup", title = "log transformed") # gorgeous
# hist(pw_noday0$log_adh_plus_sup) # better
# shapiro.test(pw_noday0$log_adh_plus_sup) # p-value = 0.01361, does not pass shapiro, but this has an n of 72 which is more than the recommended <50 samples

# visualize comparisons
# TB y or n
# pw_noday0 %>% 
#     ggplot(aes(x = TB, 
#            y = log_adh_plus_sup)) +
#   geom_boxplot()
# # water_treat
# pw_noday0 %>% 
#     ggplot(aes(x = water_treatment, 
#            y = log_adh_plus_sup)) +
#   geom_boxplot()
# # day
# pw_noday0 %>% 
#     ggplot(aes(x = day, 
#            y = log_adh_plus_sup)) +
#   geom_boxplot()

```

## SBNCOS Assumption testing: ANOVA

Most appropriate comparison for study design: day\*microbes\*water_treatment

-   y variable: amount of Bd

-   x vars: day, TB y/n, water_treatment (pw with microbes, pw without, sterile water)

Question: Does the amount of Bd in the sample differ across the treatments of presence of water type (pw with microbes, pw without, sterile water), TB, and day?

Model: 3-way anova

## null model

```{r}
null <- lm(log_adh_plus_sup ~ 1,
  data = pw_noday0)
AIC(null) #326.4356, this is higher than the 
```

## ANOVA with interactions: Bd \~ day\*TB\*water_treatment

Note: this ANOVA does not have perfectly normally distributed residuals, but it is the best tool we have to answer our question. A Kruskall Wallace isn't the best move here because we aim to analyze interactions, if I cut the interactions, a non-interaction anova does have the perfect residuals, so no need for a KW at all!

```{r}
# create the model
aov_sbncos <- aov(log_adh_plus_sup ~ day*TB*water_treatment,
  data = pw_noday0)

# diagnostic plot
par(mfrow = c(2,2))
plot(aov_sbncos) # diagnostic plot
AIC(aov_sbncos) # better than null 127.7922!

# make qqplot to look at normality of residuals in car package with 95% CI
qqPlot(aov_sbncos$residuals) # not ideal
hist(aov_sbncos$residuals) # but this looks great!!

# tried a sqrt transformed, did not work! 
# mod5 <- aov(sqrt(adh_plus_sup) ~ day*TB*water_treatment,
#   data = pw_noday0)
# 
# # diagnostic plot
# par(mfrow = c(2,2))
# plot(mod5) # NOT normal...
# AIC(mod5) # horrible 968.6406
# 
# # make qq in car with 95% CI
# qqPlot(mod5$residuals)
```

## anova results

```{r}
# interpret results
summary(aov_sbncos)
```

### post hoc

Using a Tukey test on the anova model

```{r}
# post hoc
TukeyHSD(aov_sbncos)
```

Now let's get this in a format to visualize this data. I will use the emmeans function to extract the estimated marginal means using a tukey adjustment, and from that, will use R to differentiate between the ones with significant differences, and show that with a compact letter display (cld) plot for each comparison type.

```{r}
# emmeans and cld (compact letter display)

#..............................day...............................

# perform tukey pairwise comparisons across day only & et cld letters
cld_day <- emmeans(aov_sbncos, pairwise ~ day, adjust = "tukey") %>% 
  # add compact letter display (cld) to group days that are not significantly different
  cld(Letters = letters, reverse = TRUE) # reverse = TRUE ensures "a" goes to the highest mean

# make a plot of estimated marginal means with CLD letters for each day
cld_day_2b <- ggplot(cld_day, aes(x = day, y = emmean)) +
  geom_point(size = 1) +  # Plot the estimated means
  geom_errorbar(aes(ymin = lower.CL, ymax = upper.CL), width = 0.2) + # add 95% confidence intervals
  geom_text(aes(label = .group), nudge_y = 0.5, size = 1.75, color = "black") + # add cld group letters above points
  xlab("Day") + # axis label
  ylab("Estimated Marginal Means") + # axis label
  scale_y_continuous(labels = scales::label_number(accuracy = 1))+ # format y-axis: whole numbers onl
  ggtitle("Day") + # panel title
  scale_x_discrete(labels= c("Day_1" = "1", "Day_3" = "3", "Day_5" = "5", "Day_7" = "7")) + # clean up x-axis labels
  myCustomTheme()+ # apply my custom theme
  theme(axis.title.y = element_text(margin = margin(r = 1))) # give y-axis label a little breathing room

cld_day_2b

#..............................TB...............................
## same as above but for another factor, see "day" example for code comments

# perform tukey pairwise comparisons across TB only & get cld letters
cld_TB <- emmeans(aov_sbncos, pairwise ~ TB, adjust = "tukey") %>%
  cld(Letters = letters)

# make a plot of estimated marginal means with CLD letters for TB yes or no
cld_TB_2b <- ggplot(cld_TB, aes(x = TB, y = emmean)) +
  geom_point(size = 1) +  # Plot the estimated means
  geom_errorbar(aes(ymin = lower.CL, ymax = upper.CL), width = 0.2) +  
  geom_text(aes(label = .group), nudge_y = 0.5, size = 1.75, color = "black") + 
  xlab("TB") +
  ylab("Estimated Marginal Means") +
  scale_y_continuous(labels = scales::label_number(accuracy = 1))+ 
  ggtitle("TB") +
  myCustomTheme() +
  theme(axis.title.y = element_text(margin = margin(r = 1)))
cld_TB_2b 

#............................water treatment...............................
## same as above but for another factor, see "day" example for code comments

# perform tukey pairwise comparisons across TB only & get cld letters
cld_water_treatment <- emmeans(aov_sbncos, pairwise ~ water_treatment, adjust = "tukey") %>%
  cld(Letters = letters, reverse = TRUE)

# make a plot of estimated marginal means with CLD letters
cld_water_treatment_2b <-ggplot(cld_water_treatment, aes(x = water_treatment, y = emmean)) +
  geom_point(size = 1) +  # Plot the estimated means
  geom_errorbar(aes(ymin = lower.CL, ymax = upper.CL), width = 0.2) +  
  geom_text(aes(label = .group), nudge_y = 0.5, size = 1.75, color = "black") + 
  xlab("Water Treatment") +
  ylab("Estimated Marginal Means") +
  scale_y_continuous(labels = scales::label_number(accuracy = 1))+ 
  ggtitle("Water Treatment") +
  myCustomTheme()+
  theme(axis.title.y = element_text(margin = margin(r = 1)))
cld_water_treatment_2b


#............................TB * day............................

## perform tukey pairwise comparisons across the interaction of TB presence and day
cld_day_TB <- emmeans(aov_sbncos, pairwise ~ TB * day, adjust = "tukey") %>%
  cld(Letters = letters, reverse = TRUE)

## make labels for the TB facet panels (n = absent, y = present)
tb_labels <- c("n" = "TB absent", "y" = "TB present")

## make a plot of estimated marginal means across day, faceted by TB presence
cld_tb_day_int_2b <- ggplot(cld_day_TB, aes(x = factor(day), y = emmean)) + 
  geom_point(size = 1) +  # plot estimated marginal means for each TB * day combo
  geom_errorbar(aes(ymin = lower.CL, ymax = upper.CL), width = 0.2) +  # add 95% confidence intervals
  geom_text(aes(label = .group), nudge_y = 1, size = 1.75, color = "black") +  
  facet_wrap(~ TB,  # facet by TB 
             labeller = as_labeller(tb_labels)) + # and apply custom labels
  xlab("Day") +
  ylab("Estimated Marginal Means") +
  scale_y_continuous(labels = scales::label_number(accuracy = 1))+ # format y-axis: whole numbers only
  ggtitle("TB * Day") +
  scale_x_discrete(labels= c("Day_1" = "1", "Day_3" = "3", "Day_5" = "5", "Day_7" = "7")) +
  myCustomTheme()+
  theme(axis.title.y = element_text(margin = margin(r = 1)))
cld_tb_day_int_2b

 #........................water treat * day.......................
## same as above but for another interaction, see TB * day example for code comments

cld_water_treatment_day <- emmeans(aov_sbncos, pairwise ~ water_treatment * day, adjust = "tukey") %>%
  cld(Letters = letters, reverse = TRUE)
cld_watertreat_day_int_2b <- ggplot(cld_water_treatment_day, aes(x = factor(day), y = emmean)) +
  geom_point(size = 1) +  # Plot the estimated means
  geom_errorbar(aes(ymin = lower.CL, ymax = upper.CL), width = 0.2) +  
  geom_text(aes(label = .group), nudge_y = 1, size = 1.75, color = "black") +  
  facet_wrap(~ water_treatment) +  
  xlab("Day") +
  ylab("Estimated Marginal Means") +
  scale_y_continuous(labels = scales::label_number(accuracy = 1))+ # no decimals y axis
  ggtitle("Wtreat*Day") +
  scale_x_discrete(labels= c("Day_1" = "1", "Day_3" = "3", "Day_5" = "5", "Day_7" = "7")) +
  myCustomTheme()+
  theme(axis.title.y = element_text(margin = margin(r = 1)))
cld_watertreat_day_int_2b 

#....................third order comparisons.....................
## same as above but for another interaction, see TB * day example for code comments

cld_water_thirdorder <- emmeans(aov_sbncos, pairwise ~ water_treatment * day * TB, adjust = "tukey") %>%
  cld(Letters = letters)
tb_labels <- c("n" = "TB absent", "y" = "TB present")
cld_water_thirdorder_2b <- ggplot(cld_water_thirdorder, aes(x = factor(day), y = emmean)) +
  geom_point(size = 1) +  
  geom_errorbar(aes(ymin = lower.CL, ymax = upper.CL), width = 0.2) +  #
  geom_text(aes(label = .group), nudge_y = 1, size = 1.75, color = "black") +  
  facet_wrap(TB ~ water_treatment, labeller = labeller(TB = tb_labels)) +  
  xlab("Day") +
  ylab("Estimated Marginal Means") +
  scale_y_continuous(labels = scales::label_number(accuracy = 1))+ # no decimals y axis
  ggtitle("Wtreat*Day*TB") +
  scale_x_discrete(labels= c("Day_1" = "1", "Day_3" = "3", "Day_5" = "5", "Day_7" = "7")) +
  myCustomTheme()+
  theme(axis.title.y = element_text(margin = margin(r = 1)))
cld_water_thirdorder_2b 
```

Get the posthoc values

```{r}
# get the stats for posthoc (ph) each comparison
ph_2b_day <- emmeans(aov_sbncos, pairwise ~ day, adjust = "tukey")$contrasts
ph_2b_TB <- emmeans(aov_sbncos, pairwise ~ TB, adjust = "tukey")$contrasts
ph_2b_water_treatment <- emmeans(aov_sbncos, pairwise ~ water_treatment, adjust = "tukey")$contrasts 
ph_2b_day_TB <- emmeans(aov_sbncos, pairwise ~ TB * day, adjust = "tukey")$contrasts
ph_2b_water_treatment_day <- emmeans(aov_sbncos, pairwise ~ water_treatment * day, adjust = "tukey")$contrasts
ph_2b_water_thirdorder <- emmeans(aov_sbncos, pairwise ~ water_treatment * day * TB, adjust = "tukey")$contrasts

# print the values
ph_2b_day 
ph_2b_TB
ph_2b_water_treatment
ph_2b_day_TB 
ph_2b_water_treatment_day
ph_2b_water_thirdorder

# These all match the previous estimates from the other package TukeyHSD(aov_sbncos) and show the same trends
```

# *Publication figures

Custom theme

```{r}
# set up custom theme
myCustomTheme <- function() {
  theme_light() + # base theme with light background
    theme(axis.text = element_text(size = 7, family = "Helvetica", color = "black"), # set font for axis tick labels
          axis.title.x = element_text(margin = margin(t = 10),  # add spacing between x-axis label and plot
                                      size = 7, face = "plain", family = "Helvetica", color = "black"), # Add space between x-axis label and axis
          axis.title.y = element_text(margin = margin(r = 10), # add spacing between y-axis label and plot
                                      size = 7,  face = "plain", family = "Helvetica", color = "black"), # Add space between y-axis label and axis
          title = element_text(size = 7, face = "bold", family = "Helvetica"),
          plot.caption = element_text(size = 7, face = "italic", family = "Helvetica"),
          legend.text = element_text(size = 7, family = "Helvetica"), # increase legend text size
          panel.grid = element_blank(),  # remove all gridlines (major and minor, x and y)
          # axis.line.x = element_line(color = "grey"),  # uncomment if axis lines are needed
          # axis.line.y = element_line(color = "grey"),  # uncomment if axis lines are needed
          axis.ticks = element_line(color = "grey", size = 0.5),   # keep tick markers
          axis.ticks.x = element_line(color = "grey", size = 0.5),  # ensure bottom axis ticks
          axis.ticks.y = element_line(color = "grey", size = 0.5),  # ensure side axis ticks
          strip.text = element_text(size = 7, face = "bold", family = "Helvetica", color = "black"),  # formatting for facet labels
          strip.background = element_rect(fill = "white", color = "grey", size = 0.5))}  # set background of facet strips to white with grey border
```

# SFEB microorganisms (3A)

```{r}
fig_SFEB_microorganisms <- eb_pw %>%
  # combine floating and adherent for combined_bd
  pivot_wider(names_from = bd_location, values_from = bd_qty) %>%
  mutate(combined_bd = adherent + floating) %>% # create a new column that combines floating and adherent fractions
  
  # create the plot
  ggplot(aes(y= combined_bd, x = filter, fill = filter)) + 
    geom_boxplot() +
    geom_jitter(width = 0.2, alpha = 0.3) +  # overlay individual points, add some transparency
    scale_y_log10(labels = function(x) {gsub("e", "E", scales::scientific_format()(x))}, # show scientific notation as 1E3, 1E6, etc
      # update to consistent scale across all figures per reviewer request
      limits = c(1e+02, 1e+08), # set y-axis limits
      breaks = c(1e2, 1e3, 1e4, 1e5, 1e6, 1e7, 1e8)) +  # y-axis tick breaks
    
    facet_wrap(~day, # facet by day
               labeller = labeller(day = c("Day_1" = "Day 1", # make labels pretty
                                            "Day_7" = "Day 7"))) +
    # assign custom fill colors to each filter treatment
    scale_fill_manual(values = c("40um_filter" = with_microbes_40_color, 
                                "0.22um_filter" = no_microbes_.22_color)) +
    myCustomTheme() +
    theme(legend.position = "none", # remove legend
         panel.border = element_rect(color = "gray", size = 0.5, fill = NA)) +  # add border around each panel
  
    # re-label x-axis ticks for clarity ("+" = microbes present, "-" = no microbes)
    scale_x_discrete (labels= c("40um_filter" = "+ ", "0.22um_filter" = "-")) +
    xlab("AE microorganisms in pond water") +
    ylab("Bd quantity in supernatant and \nadherent fraction (ZE/well)") +
  
  # add controls as x's
  geom_point(data = eb_pw_controls, aes(x = filter, y = combined_bd), shape = 4, size = 2)

# add plot tag label
fig_SFEB_microorganisms <- fig_SFEB_microorganisms +
  labs(tag = "A") +
  theme(
    plot.tag = element_text(family = "Helvetica", size = 20, face = "plain", hjust = -0.1, vjust = 1), # position and style for the tag
    plot.tag.position = c(0, 1) # place in top-left corner
  )

fig_SFEB_microorganisms

#ggsave("paper-figures/expt2-SFEB_AE_microorgranisms_fig3a_updated.pdf", plot = fig_SFEB_microorganisms, width = 3.46, height = 3.46)
```


# SBNCOS microorganisms (3B)

```{r}
SBNCOS_AE_microorgranisms_fig3b <- pw_summary %>% 
  # reorder to have them appear in desired order
  mutate(sample_ID = factor(sample_ID, 
                            levels = c("1%TB", "MQ", "1%TB+PW+microorganism", "PW+microorganism", "1%TB+PW-microorganism", "PW-microorganism", "Added Bd"))) %>% 
  ggplot(aes(x = day_numeric, 
             y = mean, 
             color = sample_ID)) +
  geom_point(size = 2) +
  geom_errorbar(aes(ymin = mean - se, # plot the standard error
                    ymax = mean + se),
                width = 0.1) +

  # Adding the raw data as a layer with jitter, Renwei didn't like this so it is commented out
  # geom_point(data = pw_noday0, 
  #            aes(x = day_numeric, 
  #                y = adh_plus_sup, 
  #                color = sample_ID), 
  #            position = position_jitter(width = 0.1, seed = 1),
  #            alpha = 0.3) +
  # # add control raw data too
  # geom_point(data = pw_control_data, 
  #            aes(x = day_numeric, 
  #                y = adh_plus_sup, 
  #                color = "#BBBBBB"),  
  #            position = position_jitter(width = 0.1, seed = 1),
  #            alpha = 0.3) +

## Update y axis scale per reviewer request!
  scale_y_log10(limits = c(1e2, 1e8), 
                breaks = c(1e2, 1e3, 1e4, 1e5, 1e6, 1e7, 1e8),
                labels = function(x) {gsub("e", "E", scales::scientific_format()(x))}) +
  labs(x = "Incubation of Bd (day)",
       y = "Bd quantity in supernatant and\nadherent fraction (ZE/well)",
       color = "Medium",       # Title for color legend
       linetype = "Microbes\nPresent"  # Title for linetype legend
       ) +
  scale_color_manual(values = c("1%TB" = "#CCBB44", 
                                "MQ" = "#228833", 
                                "1%TB+PW+microorganism" = "#4477AA", 
                                "PW+microorganism" = "#EE6677", 
                                "1%TB+PW-microorganism" = "#66CCEE",
                                #"Added Bd" = "#BBBBBB" # removed bc not really a medium
                                "PW-microorganism" = "#AA3377"),  
                    labels = c("1%TB" = "TB",
                                "MQ" = "MQ",
                                "1%TB+PW+microorganism" = "TB + PW + MO",
                                "PW+microorganism" = "PW + MO",
                                "1%TB+PW-microorganism" = "TB + PW - MO",
                                "PW-microorganism" = "PW - MO",
                                "Added Bd" = "Initial Bd")) + # Custom labels for the color legend
  
   geom_line(aes(linetype = microbes), show.legend = FALSE) + 
  scale_linetype_manual(values = c("n" = "dashed", 
                                   "y" = "solid"),
                        labels = c("n" = "N", "y" = "Y")) +  # Change labels to uppercase N and Y
 myCustomTheme()+
  scale_x_continuous(breaks = c(0, 1, 3, 5, 7),
                   labels = c("Initial\nBd", "1", "3", "5", "7")) +
  theme(legend.position = "bottom",
        panel.border = element_blank(),
        legend.text = element_text(size = 5),  # Set legend text font size to 5pt
        legend.key.size = unit(0.4, "cm"),  # Reduce size of legend keys
        legend.spacing.y = unit(0.1, "cm"),  # Reduce vertical spacing between legend items
        legend.margin = margin(t = 0, r = 0, b = 0, l = 0), # Remove margins around legend
        axis.line.x = element_line(color = "grey", size = 0.5),  # Keep the x-axis line, make ~2.35 pt
        axis.line.y = element_line(color = "grey", size = 0.5)) + # Keep the x-axis line, make ~2.35 pt

  guides(color = guide_legend(title = NULL))

#SBNCOS_AE_microorgranisms_fig3b

SBNCOS_AE_microorgranisms_fig3b <- SBNCOS_AE_microorgranisms_fig3b +
  labs(tag = "B") +
  theme(
    plot.tag = element_text(family = "Helvetica", size = 20, face = "plain", hjust = -0.1, vjust = 1),
    plot.tag.position = c(0, 1)
  )

SBNCOS_AE_microorgranisms_fig3b

#ggsave("paper-figures/expt2-SBNCOS_AE_microorgranisms_fig3b_updated.pdf", plot = SBNCOS_AE_microorgranisms_fig3b, width = 3.46, height = 3.46)
```

# *SI figures and tables

## S4: barplot

```{r}
#.............................prep data..............................

# reformat the controls dataset: rename filters to match the style of sterile MQ samples
eb_pw_controls <- eb_pw_controls %>%
  mutate(filter = case_when(
    filter == "40um_filter" ~ "sterile MQ 40um_filter",
    filter == "0.22um_filter" ~ "sterile MQ 0.22um_filter",
    TRUE ~ filter
  ))

# combine main dataset and controls into one
combined_data <- bind_rows(
  eb_pw %>%
    # combine floating and adherent for total Bd
    pivot_wider(names_from = bd_location, values_from = bd_qty) %>%
    mutate(combined_bd = adherent + floating),
  eb_pw_controls # controls data is already in the required format
)

#.............................make plot..............................

fig_SI2A <- combined_data %>%
  ggplot(aes(y = combined_bd, x = site, fill = filter)) + 
    geom_col(position = position_dodge()) + # use side-by-side columns for filter types within each site
    scale_y_continuous(
      expand = c(0.01, 0.01),  # small expansion so bars aren't cut off
      trans = "log",  # natural log scale
      breaks = c(1e+01, 1e+03, 1e+05),  # show these tick marks
      labels = function(x) {gsub("e", "E", scales::label_scientific()(x))}) +  # use 1E1 format
    facet_wrap(~day, labeller = labeller(day = c("Day_1" = "Day 1", "Day_7" = "Day 7"))) + # facet by day (Day 1 and Day 7)
    scale_x_discrete(limits = c("BARN", "CABIN", "NORTH", "GRAMPS", "WEST", "GDPND004", "GDPND005", "GDPND006", "GDPND008", "GDPND009", "PRPND002", "PRPND003", "PRPND004", "PRPND009", "PRPND010", "sterile MQ")) +  # order x-axis (sites) so sterile MQ is last
    scale_fill_manual(values = c( # colors
      "40um_filter" = with_microbes_40_color, 
      "0.22um_filter" = no_microbes_.22_color,
      "sterile MQ 40um_filter" = "darkgray",
      "sterile MQ 0.22um_filter" = "lightgray" )) +
    myCustomTheme() + 
   theme(
    axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1),  # rotate x-axis labels
    legend.position = "bottom",  # move legend below plot
    panel.border = element_rect(color = "gray", size = 0.5, fill = NA),  # add subtle border around panel
    legend.text = element_text(size = 5),  # shrink legend text
    legend.key.size = unit(0.4, "cm"),  # shrink legend key size
    legend.spacing.y = unit(0.1, "cm"),  # reduce vertical space between legend items
    legend.margin = margin(t = 0, r = 0, b = 0, l = 0)) +  # remove outer margin from legend
    xlab("Pond") +
    ylab("Bd Quantityin supernatant and\nadherent fraction (ZE/well)") +
    guides(fill = guide_legend(title = ""))   # remove legend title

fig_SI2A

#ggsave("paper-figures/SI_FigS2.pdf", plot = fig_SI2A, width = 7.09, height = 3.46)
```

## S5: posthoc

Note this one has global y limits and breaks to ensure consistency and help with comparisons

```{r}
#.......................... global axis settings ..........................

# set consistent y-axis limits and breaks for all cld plots
global_y_limits <- c(8, 16.5)
global_y_breaks <- seq(8, 16, by = 2)
global_y_limits <- c(8, 16.5)
global_y_breaks <- seq(8, 16, by = 2)

#..............................day...............................
# make a plot of estimated marginal means with CLD letters for each day
cld_day_2b <- ggplot(cld_day, aes(x = day, y = emmean)) +
  geom_point(size = 1) +  # plot the estimated means
  geom_errorbar(aes(ymin = lower.CL, ymax = upper.CL), width = 0.2) +  # add 95% confidence intervals
  geom_text(aes(label = .group), nudge_y = 1, size = 1.75, color = "black") +  # add cld group letters above points
  xlab("Day") +
  ylab("Estimated Marginal Means") +
  scale_y_continuous(labels = scales::label_number(accuracy = 1), 
                     limits = global_y_limits, breaks = global_y_breaks) +  # consistent y-axis
  ggtitle("Day") +
  scale_x_discrete(labels= c("Day_1" = "1", "Day_3" = "3", "Day_5" = "5", "Day_7" = "7")) +  # simplify x-axis labels
  myCustomTheme() +
  theme(axis.title.y = element_text(margin = margin(r = 1)))  # add breathing room

#..............................TB...............................
## same as above but for another factor, see "day" example for code comments
cld_TB_2b <- ggplot(cld_TB, aes(x = TB, y = emmean)) +
  geom_point(size = 1) +
  geom_errorbar(aes(ymin = lower.CL, ymax = upper.CL), width = 0.2) +
  geom_text(aes(label = .group), nudge_y = 1, size = 1.75, color = "black") +
  xlab("TB") +
  ylab("Estimated Marginal Means") +
  scale_y_continuous(labels = scales::label_number(accuracy = 1), limits = global_y_limits, breaks = global_y_breaks) +
  ggtitle("TB") +
  myCustomTheme() +
  theme(axis.title.y = element_text(margin = margin(r = 1)))

#............................water treatment...............................
## same as above but for another factor, see "day" example for code comments
cld_water_treatment_2b <- ggplot(cld_water_treatment, aes(x = water_treatment, y = emmean)) +
  geom_point(size = 1) +
  geom_errorbar(aes(ymin = lower.CL, ymax = upper.CL), width = 0.2) +
  geom_text(aes(label = .group), nudge_y = 1, size = 1.75, color = "black") +
  xlab("Water Treatment") +
  ylab("Estimated Marginal Means") +
  scale_y_continuous(labels = scales::label_number(accuracy = 1), limits = global_y_limits, breaks = global_y_breaks) +
  ggtitle("Water Treatment") +
  myCustomTheme() +
  theme(axis.title.y = element_text(margin = margin(r = 1)))

#............................TB * day............................

## make labels for the TB facet panels (n = absent, y = present)
tb_labels <- c("n" = "TB absent", "y" = "TB present")

## make a plot of estimated marginal means across day, faceted by TB presence
cld_tb_day_int_2b <- ggplot(cld_day_TB, aes(x = factor(day), y = emmean)) +
  geom_point(size = 1) +
  geom_errorbar(aes(ymin = lower.CL, ymax = upper.CL), width = 0.2) +
  geom_text(aes(label = .group), nudge_y = 1, size = 1.75, color = "black") +
  facet_wrap(~ TB, labeller = as_labeller(tb_labels)) +
  xlab("Day") +
  ylab("Estimated Marginal Means") +
  scale_y_continuous(labels = scales::label_number(accuracy = 1), limits = global_y_limits, breaks = global_y_breaks) +
  ggtitle("TB * Day") +
  scale_x_discrete(labels = c("Day_1" = "1", "Day_3" = "3", "Day_5" = "5", "Day_7" = "7")) +
  myCustomTheme() +
  theme(axis.title.y = element_text(margin = margin(r = 1)))


#.....................water treat * day.........................
## same as above but for another interaction, see TB * day example for code comments
cld_watertreat_day_int_2b <- ggplot(cld_water_treatment_day, aes(x = factor(day), y = emmean)) +
  geom_point(size = 1) +
  geom_errorbar(aes(ymin = lower.CL, ymax = upper.CL), width = 0.2) +
  geom_text(aes(label = .group), nudge_y = 1, size = 1.75, color = "black") +
  facet_wrap(~ water_treatment) +
  xlab("Day") +
  ylab("Estimated Marginal Means") +
  scale_y_continuous(labels = scales::label_number(accuracy = 1), limits = global_y_limits, breaks = global_y_breaks) +
  ggtitle("Water Treatment * Day") +
  scale_x_discrete(labels = c("Day_1" = "1", "Day_3" = "3", "Day_5" = "5", "Day_7" = "7")) +
  myCustomTheme() +
  theme(axis.title.y = element_text(margin = margin(r = 1)))

#......................combine all panels.........................
## use patchwork to arrange all cld plots into one figure
pairwise_cld_2b <- (cld_day_2b + cld_TB_2b + cld_water_treatment_2b) /
                   (cld_tb_day_int_2b + cld_watertreat_day_int_2b) +
                   plot_annotation(tag_levels = 'A')

pairwise_cld_2b


#ggsave("paper-figures/SI_2b_updated.pdf", plot = pairwise_cld_2b, width = 7.09, height = 3.46)
```

```{r}
global_y_limits <- c(7, 19)
global_y_breaks <- seq(8, 18, by = 2)

cld_water_thirdorder_2b <- ggplot(cld_water_thirdorder, aes(x = factor(day), y = emmean)) +
  geom_point(size = 1) +
  geom_errorbar(aes(ymin = lower.CL, ymax = upper.CL), width = 0.2) +
  geom_text(aes(label = .group), nudge_y = 1.5, size = 1.75, color = "black") +
  facet_wrap(TB ~ water_treatment, labeller = labeller(TB = tb_labels)) +
  xlab("Day") +
  ylab("Estimated Marginal Means") +
  scale_y_continuous(
    labels = scales::label_number(accuracy = 1), 
    limits = global_y_limits, 
    breaks = global_y_breaks
  ) +
  ggtitle("Water Treatment * Day * TB") +
  scale_x_discrete(labels = c("Day_1" = "1", "Day_3" = "3", "Day_5" = "5", "Day_7" = "7")) +
  myCustomTheme() +
  theme(axis.title.y = element_text(margin = margin(r = 1)))

cld_water_thirdorder_2b

#ggsave("paper-figures/SI_2b_thirdorder_updated.pdf", plot = cld_water_thirdorder_2b , width = 7.09, height = 3.46)

```

# Appendix

## Anova table

Not in paper, stating information in sentences and using CLD plot instead

```{r}
# anova table
anova_output <- tidy(aov_sbncos)

aov_sbncos_tbl <- anova_output %>%
  dplyr::select(term, df, sumsq, meansq, statistic, p.value) %>%
  gt() %>%
  tab_header(
    title = "ANOVA Table"
  ) %>%
  fmt_number(
    columns = c(sumsq, meansq, statistic),
    decimals = 2
  ) %>%
  cols_label(
    term = "Term",
    df = "Df",
    sumsq = "Sum Sq",
    meansq = "Mean Sq",
    statistic = "F value",
    p.value = "P-value"
  ) %>%  # scientific number format for values <0.001 in p values
  fmt_scientific(
    columns = c(p.value),
    decimals = 1,
    rows = p.value < 0.001
  ) %>%
  # 3 decimals for p values >=0.001
  fmt_number(
    columns = c(p.value),
    decimals = 3,
    rows = p.value >= 0.001
  )
aov_sbncos_tbl

# prettier, simplified
anova_output <- tidy(aov_sbncos)

# Modify term to include degrees of freedom in *italics*
anova_output <- anova_output %>%
  mutate(term = ifelse(grepl("day:medium", term), "day x medium", term)) %>% 
  mutate (term = paste0(term, " (*df = ", df, ", ", anova_output[df == max(df), "df"], "*)")) %>% 
  filter(term != "Residuals (*df = 48, 48*)")

# Create the gt table with selected columns
aov_sbncos_tbl_b <- anova_output %>%
  dplyr::select(term, statistic, p.value) %>%
  gt() %>%
  tab_header(
    title = "ANOVA Table"
  ) %>%
  fmt_markdown(
    columns = c(term)
  ) %>%
  fmt_number(
    columns = c(statistic),
    decimals = 2
  ) %>%
  cols_label(
    term = "",
    statistic = "F value",
    p.value = "P-value"
  ) %>%
  fmt_scientific(
    columns = c(p.value),
    decimals = 1,
    rows = p.value < 0.001
  ) %>%
  fmt_number(
    columns = c(p.value),
    decimals = 3,
    rows = p.value >= 0.001
  )

aov_sbncos_tbl_b
```

## 2b posthoc table

We likely will not include this, but if we need to find these specific t and p values we can locate them here

```{r}
ph_2b_day_df <- as.data.frame(ph_2b_day)
ph_2b_TB_df <- as.data.frame(ph_2b_TB)
ph_2b_water_treatment_df <- as.data.frame(ph_2b_water_treatment)
ph_2b_water_treatment_day_df <- as.data.frame(ph_2b_water_treatment_day)
ph_2b_day_TB_df <- as.data.frame(ph_2b_day_TB)
  
ph_2b_day_df <- ph_2b_day_df  %>% mutate(factor = "Day")
ph_2b_TB_df <- ph_2b_TB_df  %>% mutate(factor = "TB")
ph_2b_water_treatment_df <- ph_2b_water_treatment_df  %>% mutate(factor = "WTreat")
ph_2b_water_treatment_day_df <- ph_2b_water_treatment_day_df  %>% mutate(factor = "Day*WTreat")
ph_2b_day_TB_df <- ph_2b_day_TB_df %>% mutate(factor = "Day*TB")

# combine all pairwise comparisons
f2b_all_tukey_df <- bind_rows(ph_2b_day_df, ph_2b_TB_df, ph_2b_water_treatment_df, ph_2b_water_treatment_day_df, ph_2b_day_TB_df)

f2b_all_tukey_df

ph2b_table <- f2b_all_tukey_df %>%
  dplyr::select(factor, contrast, estimate, SE, df, t.ratio, p.value) %>%
  gt() %>%
  # change column names
  cols_label(
    factor = "Comparison",
    contrast = "Group Comparison",
    estimate = "Estimate",
    SE = "Standard Error",
    df = "Degrees of Freedom",
    t.ratio = "t-Ratio",
    p.value = "p-value"
  ) %>%
  # update header for table
  tab_header(
    title = "4b Emmeans Post-hoc Test Results"
  ) %>%
  # 3 decimal places
  fmt_number(
    columns = c(estimate, SE, t.ratio),
    decimals = 3
  ) %>%
  # scientific number format for values <0.001 in p values
  fmt_scientific(
    columns = c(p.value),
    decimals = 1,
    rows = p.value < 0.001
  ) %>%
  # 3 decimals for p values >=0.001
  fmt_number(
    columns = c(p.value),
    decimals = 3,
    rows = p.value >= 0.001
  ) %>%
  #make the headers bold
  tab_style(
    style = list(
      cell_text(weight = "bold")
    ),
    locations = cells_column_labels(everything()))

ph2b_table
```
